@page
@model HotKeyJs.Pages.KeyMapperModel
@{

}
<div class="alert alert-primary" role="alert">
    Experimenting setting a single hot-key
</div>
<div class="row" id="main-content">
    <div class="col-3">

        <select id="keyCombinationsSelect" name="keyCombinationsSelect" class="form-select" style="width: 9em;" multiple aria-label="control keys for building hot key">
            <option value="Ctrl">Ctrl</option>
            <option value="Alt">Alt</option>
            <option value="Shift">Shift</option>
        </select>
            
    </div>

        <div class="col pt-2">
            <button class="btn btn-primary" onclick="getSelectedCombinations()">Use these</button>
            <button class="btn btn-primary" onclick="clearCombinationsSelected()">Clear these</button>
        </div>
    </div>
    <div class="row g-3 align-items-center mt-2">
        <div class="col-auto">
            <label for="keyCombinationsCharacter" class="col-form-label">Character</label>
        </div>
        <div class="col-auto">
            <input type="text" id="keyCombinationsCharacter" class="form-control text-lowercase" maxlength="1" style="width: 2.5em" aria-describedby="passwordHelpInline">
        </div>
    </div>
    <div class="form-group mt-2">
        <div class="col-sm-10">

            <button type="submit"
                    id="btn-submit"
                    onclick="exit()"
                    class="btn btn-outline-dark ms-2 mb-2"
                    aria-keyshortcuts="Ctrl+Q">
                Enter
            </button>

        </div>
    </div>




@section Scripts
{

    <script>

        function clearCombinationsSelected() {
            $("#keyCombinationsSelect option:selected").prop("selected", false);
            localStorage.setItem("appControlKeys", "");
            localStorage.setItem("appKey", "");
            document.getElementById('keyCombinationsCharacter').value = '';
        }

        function getSelectedCombinations() {
            var options = document.getElementById('keyCombinationsSelect').selectedOptions;
            var values = Array.from(options).map(({ value }) => value);
            
            if (!Array.isArray(values) || !values.length) {
                
                return;
            }

            var item = document.getElementById('keyCombinationsCharacter').value.trim();
            if (item) {
            
                var controlKeys = values.join("+");
                var key = Array.from(item)[0];
                console.log(`selections ${controlKeys}, ${key}`);
                console.log();

                const array = controlKeys.split('+');
                for (var index = 0; index < array.length; index++) {
                    console.log(array[index]);
                }

                $Application.saveKeys(controlKeys, key);
            }

        }



        $(document).ready(function(e) {
            var array = localStorage.getItem('appControlKeys').split('+');
            $("#keyCombinationsSelect").val(array);
            document.getElementById('keyCombinationsCharacter').value = localStorage.getItem('appKey');


        });

        function exit() {
            window.location.replace("Index");
        }
    </script>
}
