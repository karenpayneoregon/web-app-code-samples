@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    .btn {
        display: flex;
        margin-top: 1.5em
    }

</style>

<div class="container">

    <div class="alert alert-primary shadow mt-2 mb-4" role="alert">
        <h1 class="fs-6 text-center">Reading list from settings</h1>
    </div>

    <form id="theForm" method="post" class="needs-validation">

        <div class="row">

            <div class="d-flex justify-content-between">
                <label for="ZIP">ZIP : </label>
            </div>
            <div class="col-lg-6">
                <input type="text" class="form-control" id="ZIP" required />
                <div class="invalid-feedback">
                    Please enter your current zip code
                </div>
            </div>
        </div>

        <div class="input-group">

            <label asp-for="SelectedCountry">
                Country
                <select name="Code"
                        id="countries"
                        asp-for="SelectedCountry"
                        class="form-select"
                        style="width: 10.2em"
                        asp-items="Model.Options">
                </select>
            </label>

            <input type="submit"
                   value="Save"
                   class="btn btn-primary" />

        </div>

    </form>
</div>

<script>
    const _formName = 'theForm';

    validateInputs(document.querySelectorAll('.needs-validation'));
    document.getElementById(_formName).addEventListener("submit", function (event) { }, false);

    function validateInputs(forms) {

        Array.from(forms).forEach(form => {

            form.addEventListener('submit',
                event => {

                    if (!form.checkValidity()) {

                        event.preventDefault();
                        event.stopPropagation();

                    }

                    form.classList.add('was-validated');
                },
                false);
        });

    }

    function checkZIP() {

        const constraints = {
            ch: [
                "^(CH-)?\\d{4}$",
                "Switzerland ZIPs must have exactly 4 digits: e.g. CH-1950 or 1950"
            ],
            fr: [
                "^(F-)?\\d{5}$",
                "France ZIPs must have exactly 5 digits: e.g. F-75012 or 75012"
            ],
            de: [
                "^(D-)?\\d{5}$",
                "Germany ZIPs must have exactly 5 digits: e.g. D-12345 or 12345"
            ],
            nl: [
                "^(NL-)?\\d{4}\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$",
                "Netherlands ZIPs must have exactly 4 digits, followed by 2 letters except SA, SD and SS"
            ],
            us: [
                "^(D-)?\\d{5}$",
                "US ZIPs must have exactly 5 digits"
            ]
        };

        const country = document.getElementById("countries").value;
        const ZIPField = document.getElementById("ZIP");

        const constraint = new RegExp(constraints[country][0], "");
        //console.log(constraint);

        if (constraint.test(ZIPField.value)) {
            ZIPField.setCustomValidity("");
        } else {
            ZIPField.setCustomValidity(constraints[country][1]);
        }
    }



    document.addEventListener("DOMContentLoaded", () => {
        document.getElementById("countries").onchange = checkZIP;
        document.getElementById("ZIP").oninput = checkZIP;
    });

</script>
