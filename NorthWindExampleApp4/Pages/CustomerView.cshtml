@page
@model NorthWindExampleApp4.Pages.CustomerViewModel

@{
    ViewData["Title"] = "Customers";
}


@* 
    1. TODO Proof of concept, dynamic sort by property.
    2. Sticky table header via css below
    3. TODO Move rows up/down, works  but can use clean-up
*@

<link rel="stylesheet" href="lib/bootstrap-icons/font/bootstrap-icons.min.css"/>
<link rel="stylesheet" href="lib/bootstrap-table/extensions/sticky-header/bootstrap-table-sticky-header.min.css"/>
<script src="lib/bootstrap-table/extensions/sticky-header/bootstrap-table-sticky-header.min.js"></script>

<style>
    tbody {
        display:block;
        height:600px;
        overflow:auto;
    }
    thead, tbody tr {
        display:table;
        width:100%;
        table-layout:fixed;
    }
</style>
<h1 class="fs-5">Customers</h1>
<form method="post">
    <input id="selectedIndex" type="hidden" asp-for="SelectedIndex" />
    <div class="row mb-4 mt-4">
        <div class="col-md-3">
            <select id="modelColumns" 
                    name="Id" 
                    class="form-select" 
                    asp-items="@Model.ColumnList">
            </select>
            <label for="modelColumns" class="form-label">Columns</label>

        </div>
        <div class="col-6">
            <input type="submit" class="btn btn-outline-dark" value="Order by" asp-page-handler="Submit" />
        </div>
    </div>
</form>


<table id="customersTable" class="table table-striped">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].CompanyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].Street)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].City)
            </th>
@*             <th>
                @Html.DisplayNameFor(model => model.Customers[0].Region)
            </th> *@
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].PostalCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].Phone)
            </th>
@*             <th>
                @Html.DisplayNameFor(model => model.Customers[0].Fax)
            </th> *@
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].ModifiedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].Contact)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].ContactTypeIdentifierNavigation.ContactTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].CountryIdentifierNavigation.Name)
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Customers)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CompanyName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Street)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
@*                 <td>
                    @Html.DisplayFor(modelItem => item.Region)
                </td> *@
                <td>
                    @Html.DisplayFor(modelItem => item.PostalCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
@*                 <td>
                    @Html.DisplayFor(modelItem => item.Fax)
                </td> *@
                <td>
                    @Html.DisplayFor(modelItem => item.ModifiedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Contact.ContactId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContactTypeIdentifierNavigation.ContactTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CountryIdentifierNavigation.Name)
                </td>
                <td><button class="move up btn btn-outline-dark"><i class="bi bi-arrow-up-circle"></i></button></td>
                <td><button class="move down btn btn-outline-dark"><i class="bi bi-arrow-down-circle"></i></button></td>
            </tr>
        }
    </tbody>
</table>



@section Scripts {

    <script>

        document.addEventListener("DOMContentLoaded", () => {
            if (localStorage.getItem("columnIndex") !== null) {
                document.getElementById("modelColumns").selectedIndex = parseInt(localStorage.getItem("columnIndex"));
            }
        });

        $('form').submit(function (event) {
            localStorage.setItem("columnIndex", document.getElementById("modelColumns").selectedIndex);
        });

        $('#customersTable button.move').click(function () {
            const row = $(this).closest('tr');
            if ($(this).hasClass('up'))
                row.prev().before(row);
            else
                row.next().after(row);
        });

    </script>
}
